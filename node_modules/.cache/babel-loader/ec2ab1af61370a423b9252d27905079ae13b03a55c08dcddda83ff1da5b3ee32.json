{"ast":null,"code":"import React, { useState, useEffect, useContext } from 'react';\nimport { useInView } from 'react-intersection-observer';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nvar RevealMode;\n(function (RevealMode) {\n  RevealMode[RevealMode[\"Clone\"] = 0] = \"Clone\";\n  RevealMode[RevealMode[\"Wrap\"] = 1] = \"Wrap\";\n})(RevealMode || (RevealMode = {}));\nvar Reveal = function Reveal(_ref) {\n  var children = _ref.children,\n    onShowDone = _ref.onShowDone,\n    _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? RevealMode.Wrap : _ref$mode,\n    animation = _ref.animation,\n    _ref$delay = _ref.delay,\n    delay = _ref$delay === void 0 ? 0 : _ref$delay,\n    debugName = _ref.debugName,\n    style = _ref.style,\n    wait = _ref.wait,\n    onEnterView = _ref.onEnterView;\n  var _useInView = useInView({\n      triggerOnce: true\n    }),\n    ref = _useInView[0],\n    inView = _useInView[1];\n  var _useState = useState(false),\n    show = _useState[0],\n    setShow = _useState[1];\n  useEffect(function () {\n    if (debugName) {\n      console.log('Debugging', debugName);\n    }\n    if (inView) {\n      onEnterView && onEnterView();\n      if (wait !== true) {\n        if (debugName) {\n          console.log(debugName + \" is in view\");\n        }\n        setTimeout(function () {\n          setShow(true);\n          onShowDone && onShowDone();\n          if (debugName) {\n            console.log(\"showing \" + debugName);\n          }\n        }, delay);\n      }\n    }\n  }, [inView, wait]);\n  var className = show ? animation : children.props ? children.props.className : '';\n  var visibility = show ? 'visible' : 'hidden';\n  var extraProps = {\n    className: className,\n    style: _extends({\n      visibility: visibility\n    }, style),\n    ref: ref\n  };\n  if (mode === RevealMode.Clone) {\n    return React.cloneElement(children, extraProps);\n  }\n  return React.createElement(\"div\", Object.assign({}, extraProps), children);\n};\nvar AnimatedTitle = function AnimatedTitle(_ref) {\n  var animation = _ref.animation,\n    children = _ref.children,\n    _ref$delay = _ref.delay,\n    delay = _ref$delay === void 0 ? 100 : _ref$delay,\n    _ref$spaceBetweenWord = _ref.spaceBetweenWords,\n    spaceBetweenWords = _ref$spaceBetweenWord === void 0 ? 8 : _ref$spaceBetweenWord,\n    rest = _objectWithoutPropertiesLoose(_ref, [\"animation\", \"children\", \"delay\", \"spaceBetweenWords\"]);\n  var titleStyles = {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexWrap: 'wrap'\n  };\n  var wordStyles = {\n    marginRight: spaceBetweenWords\n  };\n  return React.createElement(\"div\", {\n    style: titleStyles\n  }, children.split(' ').map(function (word, index) {\n    return React.createElement(Reveal, {\n      animation: animation,\n      key: index,\n      delay: index * delay,\n      style: wordStyles\n    }, React.createElement(\"div\", Object.assign({}, rest), word));\n  }));\n};\nvar RevealContext = /*#__PURE__*/\nReact.createContext(null);\nvar RevealProvider = function RevealProvider(_ref) {\n  var children = _ref.children,\n    _ref$delayBetween = _ref.delayBetween,\n    delayBetween = _ref$delayBetween === void 0 ? 200 : _ref$delayBetween,\n    _ref$initialDelay = _ref.initialDelay,\n    initialDelay = _ref$initialDelay === void 0 ? 0 : _ref$initialDelay,\n    _ref$disableDelay = _ref.disableDelay,\n    disableDelay = _ref$disableDelay === void 0 ? false : _ref$disableDelay,\n    animation = _ref.animation;\n  var _useState = useState(0),\n    lastIndex = _useState[0],\n    setLastIndex = _useState[1];\n  var _useState2 = useState(null),\n    firstIndex = _useState2[0],\n    setFirstIndex = _useState2[1];\n  return React.createElement(RevealContext.Provider, {\n    value: {\n      lastIndex: lastIndex,\n      firstIndex: firstIndex,\n      setFirstIndex: setFirstIndex,\n      setLastIndex: setLastIndex,\n      delayBetween: delayBetween,\n      initialDelay: initialDelay,\n      disableDelay: disableDelay,\n      animation: animation\n    }\n  }, children);\n};\nvar SequenceElement = function SequenceElement(_ref) {\n  var index = _ref.index,\n    children = _ref.children,\n    rest = _objectWithoutPropertiesLoose(_ref, [\"index\", \"children\"]);\n  var revealContext = useContext(RevealContext);\n  var config = _extends({}, revealContext, {}, rest);\n  var delayBetween = config.delayBetween,\n    initialDelay = config.initialDelay,\n    disableDelay = config.disableDelay,\n    mode = config.mode,\n    animation = config.animation,\n    lastIndex = config.lastIndex,\n    setLastIndex = config.setLastIndex,\n    firstIndex = config.firstIndex,\n    setFirstIndex = config.setFirstIndex;\n  var shouldWait = firstIndex === 0;\n  var wait = shouldWait ? index > lastIndex : false;\n  var isFirstElement = index === 0;\n  var firstElementDelay = initialDelay !== undefined ? initialDelay : 0;\n  var shouldDisableDelay = disableDelay || firstIndex !== 0;\n  var finalDelay = disableDelay ? 0 : isFirstElement ? firstElementDelay : delayBetween;\n  return React.createElement(Reveal, {\n    wait: wait,\n    mode: mode,\n    animation: animation,\n    onShowDone: function onShowDone() {\n      return setLastIndex(index + 1);\n    },\n    onEnterView: function onEnterView() {\n      if (firstIndex === null) {\n        setFirstIndex(index);\n      }\n    },\n    delay: shouldDisableDelay ? 0 : finalDelay,\n    key: index\n  }, children);\n};\nvar RevealElements = function RevealElements(_ref) {\n  var elements = _ref.elements,\n    children = _ref.children,\n    rest = _objectWithoutPropertiesLoose(_ref, [\"elements\", \"children\"]);\n  return React.createElement(RevealProvider, Object.assign({}, rest), elements.map(function (elem, index) {\n    return React.createElement(SequenceElement, {\n      index: index,\n      key: index\n    }, children(elem, index));\n  }));\n};\nvar RevealChildren = function RevealChildren(_ref) {\n  var children = _ref.children,\n    rest = _objectWithoutPropertiesLoose(_ref, [\"children\"]);\n  return React.createElement(RevealProvider, Object.assign({}, rest), React.Children.map(children, function (child, index) {\n    return React.createElement(SequenceElement, {\n      index: index,\n      key: index\n    }, child);\n  }));\n};\nexport { AnimatedTitle, Reveal, RevealChildren, RevealElements, RevealMode, RevealProvider, SequenceElement };","map":{"version":3,"mappings":"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","names":["RevealMode","Reveal","children","onShowDone","mode","Wrap","animation","delay","debugName","style","wait","onEnterView","useInView","triggerOnce","ref","inView","useState","show","setShow","useEffect","console","log","setTimeout","className","props","visibility","extraProps","Clone","React","cloneElement","AnimatedTitle","spaceBetweenWords","rest","titleStyles","display","flexDirection","justifyContent","alignItems","flexWrap","wordStyles","marginRight","split","map","word","index","key","RevealContext","createContext","RevealProvider","delayBetween","initialDelay","disableDelay","lastIndex","setLastIndex","firstIndex","setFirstIndex","Provider","value","SequenceElement","revealContext","useContext","config","shouldWait","isFirstElement","firstElementDelay","undefined","shouldDisableDelay","finalDelay","RevealElements","elements","elem","RevealChildren","Children","child"],"sources":["I:\\Homepage\\moriguchifoods\\node_modules\\react-genie\\src\\Reveal.tsx","I:\\Homepage\\moriguchifoods\\node_modules\\react-genie\\src\\AnimatedTitle.tsx","I:\\Homepage\\moriguchifoods\\node_modules\\react-genie\\src\\reveal-context.tsx","I:\\Homepage\\moriguchifoods\\node_modules\\react-genie\\src\\RevealProvider.tsx","I:\\Homepage\\moriguchifoods\\node_modules\\react-genie\\src\\SequenceElement.tsx","I:\\Homepage\\moriguchifoods\\node_modules\\react-genie\\src\\RevealElements.tsx","I:\\Homepage\\moriguchifoods\\node_modules\\react-genie\\src\\RevealChildren.tsx"],"sourcesContent":["import { VisibilityProperty } from 'csstype';\nimport React, { useEffect, useState } from 'react';\nimport { useInView } from 'react-intersection-observer';\n\nexport enum RevealMode {\n  Clone,\n  Wrap,\n}\n\nexport const Reveal: React.FC<{\n  animation: string; //animation class name\n  delay?: number;\n  children?: any;\n  mode?: RevealMode;\n  debugName?: string;\n  style?: React.CSSProperties;\n  onShowDone?: () => void;\n  onEnterView?: () => void;\n  wait?: boolean;\n}> = ({\n  children,\n  onShowDone,\n  mode = RevealMode.Wrap,\n  animation,\n  delay = 0,\n  debugName,\n  style,\n  wait,\n  onEnterView,\n}) => {\n  const [ref, inView] = useInView({ triggerOnce: true });\n  const [show, setShow] = useState(false);\n\n  useEffect(() => {\n    if (debugName) {\n      console.log('Debugging', debugName);\n    }\n    if (inView) {\n      onEnterView && onEnterView();\n      if (wait !== true) {\n        if (debugName) {\n          console.log(`${debugName} is in view`);\n        }\n        setTimeout(() => {\n          setShow(true);\n          onShowDone && onShowDone();\n          if (debugName) {\n            console.log(`showing ${debugName}`);\n          }\n        }, delay);\n      }\n    }\n  }, [inView, wait]);\n\n  let className = show\n    ? animation\n    : children.props\n    ? children.props.className\n    : '';\n\n  let visibility = (show ? 'visible' : 'hidden') as VisibilityProperty;\n\n  let extraProps = {\n    className,\n    style: {\n      visibility,\n      ...style,\n    },\n    ref,\n  };\n\n  if (mode === RevealMode.Clone) {\n    return React.cloneElement(children, extraProps);\n  }\n\n  return <div {...extraProps}>{children}</div>;\n};\n","import React from 'react';\nimport { Reveal } from './Reveal';\n\nexport const AnimatedTitle: React.FC<{\n  children: string;\n  spaceBetweenWords?: number;\n  delay?: number;\n  animation: string;\n} & React.HTMLAttributes<any>> = ({\n  animation,\n  children,\n  delay = 100,\n  spaceBetweenWords = 8,\n  ...rest\n}) => {\n  const titleStyles = {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n  } as React.CSSProperties;\n\n  const wordStyles = {\n    marginRight: spaceBetweenWords,\n  } as React.CSSProperties;\n\n  return (\n    <div style={titleStyles}>\n      {children.split(' ').map((word, index) => (\n        <Reveal\n          animation={animation}\n          key={index}\n          delay={index * delay}\n          style={wordStyles}\n        >\n          <div {...rest}>{word}</div>\n        </Reveal>\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport { RevealProviderProps } from './RevealProvider';\n\ntype IndexState = { lastIndex: number; setLastIndex: (i: number) => void };\ntype ReavealContextValue = RevealProviderProps & IndexState;\n\nexport const RevealContext = React.createContext<ReavealContextValue | any>(\n  null\n);\n","import React, { useState } from 'react';\nimport { RevealMode } from 'Reveal';\nimport { RevealContext } from './reveal-context';\n\nexport type RevealProviderProps = {\n  delayBetween?: number;\n  initialDelay?: number;\n  disableDelay?: boolean;\n  mode?: RevealMode;\n  animation?: string;\n};\n\nexport const RevealProvider: React.FC<RevealProviderProps> = ({\n  children,\n  delayBetween = 200,\n  initialDelay = 0,\n  disableDelay = false,\n  animation,\n}) => {\n  const [lastIndex, setLastIndex] = useState<number>(0);\n  const [firstIndex, setFirstIndex] = useState<number | null>(null);\n\n  return (\n    <RevealContext.Provider\n      value={{\n        lastIndex,\n        firstIndex,\n        setFirstIndex,\n        setLastIndex,\n        delayBetween,\n        initialDelay,\n        disableDelay,\n        animation,\n      }}\n    >\n      {children}\n    </RevealContext.Provider>\n  );\n};\n\nexport default RevealProvider;\n","import React, { useContext } from 'react';\nimport { RevealProviderProps } from 'RevealProvider';\nimport { Reveal } from './Reveal';\nimport { RevealContext } from './reveal-context';\n\nexport const SequenceElement: React.FC<\n  {\n    children: any;\n    index: number;\n  } & RevealProviderProps\n> = ({ index, children, ...rest }) => {\n  const revealContext = useContext(RevealContext);\n\n  const config = {\n    ...revealContext,\n    ...rest,\n  };\n\n  const {\n    delayBetween,\n    initialDelay,\n    disableDelay,\n    mode,\n    animation,\n    lastIndex,\n    setLastIndex,\n    firstIndex,\n    setFirstIndex,\n  } = config;\n\n  const shouldWait = firstIndex === 0;\n  const wait = shouldWait ? index > lastIndex : false;\n  const isFirstElement = index === 0;\n  const firstElementDelay = initialDelay !== undefined ? initialDelay : 0;\n  const shouldDisableDelay = disableDelay || firstIndex !== 0;\n  const finalDelay = disableDelay\n    ? 0\n    : isFirstElement\n    ? firstElementDelay\n    : delayBetween;\n\n  return (\n    <Reveal\n      wait={wait}\n      mode={mode}\n      animation={animation}\n      onShowDone={() => setLastIndex(index + 1)}\n      onEnterView={() => {\n        if (firstIndex === null) {\n          setFirstIndex(index);\n        }\n      }}\n      delay={shouldDisableDelay ? 0 : finalDelay}\n      key={index}\n    >\n      {children}\n    </Reveal>\n  );\n};\n\nexport default SequenceElement;\n","import React, { ReactElement } from 'react';\nimport RevealProvider, { RevealProviderProps } from './RevealProvider';\nimport SequenceElement from './SequenceElement';\n\nexport const RevealElements: React.FC<\n  {\n    elements?: any;\n    children: (elem: any, index: number) => ReactElement;\n  } & RevealProviderProps\n> = ({ elements, children, ...rest }) => {\n  return (\n    <RevealProvider {...rest}>\n      {elements.map((elem: any, index: number) => {\n        return (\n          <SequenceElement index={index} key={index}>\n            {children(elem, index)}\n          </SequenceElement>\n        );\n      })}\n    </RevealProvider>\n  );\n};\n\nexport default RevealElements;\n","import React from 'react';\nimport SequenceElement from './SequenceElement';\nimport { RevealProvider, RevealProviderProps } from './RevealProvider';\n\nexport const RevealChildren: React.FC<RevealProviderProps> = ({\n  children,\n  ...rest\n}) => {\n  return (\n    <RevealProvider {...rest}>\n      {React.Children.map(children, (child: any, index: number) => (\n        <SequenceElement index={index} key={index}>\n          {child}\n        </SequenceElement>\n      ))}\n    </RevealProvider>\n  );\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}